    Цель работы: реализовать операции работы со стеком, который представлен в виде
    массива (статического или динамического) и в виде односвязного линейного списка,
    оценить преимущества и недостатки каждой реализации: получить представление
    о механизмах выделения и освобождения памяти при работе со стеком.

    Создать программу работы со стеком, выполняющую операции:
    - Добавление
    - Удаление
    - Вывод состояния стека

    Реализовать стек:
    - Массивом
    - Списком

    Все стандартные операции должны быть оформлены как подпрограммы.
    При реализации стека списком в вывод текущего состояния стека добавить
    просмотр адресов элементов стека и создать свой список или массив свободных
    обастей (адресов освобождаемых элементов) с выводом его на экран

    --- Распечатать убывающие серии последовательности целых чисел
    --- в обратном порядке

    Стек - это последовательный список с переменной длиной, в котором включение и исклчение
    элементов происходит по принципу: последним пришел - первым ушел, Last In - First Out (LIFO)
    Программа реализации стека возможна на основе различных структур данных, например, 
    с использованием статических или динамических одномерных массивов (векторов) и линейных списков.
    При работе со стеком доступен только его верхний элемент, который адресуется специальным
    указателем стека PS (Pointer stack). Причем классическая реализация стека предполагает
    что просмотреть элемент стека без его извлечения(удаления) невозможно.
    
    --- Аварийные ситуации:
    --- --- попытка исключения элемента из пустого стека
    --- --- переполнение стека

    Реализация стека в виде массива: под хранение стека отводится непрерывная ограниченная область
    памяти, имеющая верхнюю и нижнюю границу. Перед началом работы указатель стека (PS) находится
    ниже левой (нижней) границы массива. При добавлении первого элемента он перемещается на начало
    массива и происходит запись значения элемента. При попытке добавить элемент в стек сначала
    происходит смещение указателя на следующую ячейку (на длину типа данных),
    а затем размещение значения элемента по этому адресу.
    Если указатель выходит за верхнюю границу массива - переполнение, за нижнюю - стек пуст.
    При удалении элемента сначала считываются данные, затем указатель ставится на пред. элемент
    При работе со стеком доступен только элемент указателя PS (другие - нет).
    Структура стека (дескриптор) - имя, верх. и ниж. границы, указатель стека и описание элементов

    Реализация в виде списка: До начала работы указатель - NULL. При включении элемента в стек
    сначала происходит выделение памяти, адрес которой записывается в указатель стека, а затем
    по значению этого указателя в стек помещается информация.
    При исключении элемента сначала по указателю стека считывается информация, а затем указатель
    смещается к предыдущему элементу. После чего освобождается память, выделенная под элемент.
    Если указатель имеет значение нулевого адреса, то стек пуст.
    При физической реализации в виде односвязного линейного списка дескриптор будет отличаться
    отсутствием верхней границы стека. В этом случае объем стека ограничивается только объемом
    доступной оперативноя памяти.

    - Указание формата и диапазона вводимых данных
    - Блокирование ввода данных, неверных по типу
    - Указание операции, производимой программой
    --- Добавление элемента в стек
    --- Удаление элемента из стека
    --- Вычисление (обработка данных)
    - Наличие пояснений при выводе результата

    Также вывести на экран время выполнения программы при разных реализациях
    А также требуемый объем памяти. Выдать на экран адреса освобожденных элементов стека.